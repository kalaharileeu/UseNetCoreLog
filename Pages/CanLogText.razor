@page "/CanLogText"

<h1>CanLogText</h1>
<br />
@if (TU == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>@TU.ToString()</p>
}
<br />
<hr>
<button class="btn btn-primary" @onclick="IncrementCount">
    Test this page
    <span class="badge badge-light">@currentCount</span>
</button>
<button class="btn btn-danger" @onclick="Getresult">Test</button>
<br />
<hr>
<h3>Logging feedback </h3>
<p>The value below is the Y color value returned from the API</p>
<p>
    @foreach (PointDatevsY point in responseList)
    {
        <button class="badge">@point.Y</button>
    }
</p>
<br />
<hr>
<h3>Http response other that 200</h3>
@if (httpResposneList != null)
{
    foreach (var hr in httpResposneList)
    {
        <button class="badge badge-pill badge-info">@hr</button>
    }
}
<br />
<hr>
<h3>Exception</h3>
<br />
@if (exList != null)
{
    foreach (var ex in exList)
    {
        <p>@ex.Message ....</p>
    }
}

@code {
    private int currentCount = 0;
    private TaskUser TU;
    private string datasetname = "testtext";
    private List<Exception> exList = new List<Exception>();
    private List<PointDatevsY> responseList = new List<PointDatevsY>();
    private List<int> httpResposneList = new List<int>();

    private async Task<TaskUser> GetDatasets()
    {
        var t = new TaskUser("https://api.logyhog.com/api/", "J9ZDPC", "blazortest", $"blazor{RandomString(6)}");
        await Task.Delay(1);
        return t;
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            TU = await GetDatasets();
        }
        catch (Exception e)
        {
            exList.Add(e);
        }
    }

    private void Getresult()
    {
        try
        {
            var response = TU.Text(datasetname, RandomString(50), new Random().Next(0, 5));
            if (response is Text)
                responseList.Add(response);
            var getHttpresponse = TU.GetError(datasetname);
            if (getHttpresponse.ErrorInt < 0 || getHttpresponse.statuscode != 200)
                httpResposneList.Add(getHttpresponse.statuscode);
        }
        catch (Exception e)
        {
            exList.Add(e);
        }
    }

    public static string RandomString(int length)
    {
        var chars = "78UVWXYZ01234ABCDNOPQRSGHIJKLM569TEF";
        var stringChars = new char[length];
        var random = new Random();

        for (int i = 0; i < stringChars.Length; i++)
            stringChars[i] = chars[random.Next(chars.Length)];

        return new String(stringChars);
    }
}
