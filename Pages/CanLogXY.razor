@page "/canlogxy"
@*using UseNetCoreLog.Data
    @inject LogyhogService LogService*@
<h1>Can load datasets and check Pass/Fail</h1>
<br />
@if (TU == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>@TU.ToString()</p>
}
<br />
<p>
    <button class="badge badge-pill badge-info">Tasktoken: @inputToken </button>
    <button class="badge badge-pill badge-info"> TaskName: @inputdatasetname </button>
</p>
<input type="text" placeholder="TaskToken" name="TaskToken" @oninput="(EventArgs) => {SetInputToken(EventArgs.Value.ToString());}" />
<input type="text" placeholder="TaskName" name="TaskName" @oninput="(EventArgs) => {SetTaskName(EventArgs.Value.ToString());}" />
<hr>
<button class="btn btn-primary" @onclick="IncrementCount">
    Test this page
    <span class="badge badge-light">@currentCount</span>
</button>
<button class="btn btn-danger" @onclick="Getresult">Test</button>
<button class="btn btn-warning" @onclick="LoadTestTask">Load Test Tesk</button>
<br />
<hr />
<h3>Logging feedback </h3>
<p>Different colors for pass rates with rect limits</p>
<p>
    @foreach (Rectangle rect in responseList)
    {
        if (rect.DatasetID == 0)
        {
            <badge class="bt btn-success">@rect.X @rect.Y</badge>
        }
        if (rect.DatasetID == -1)
        {
            <badge class="bt btn-warning">@rect.X @rect.Y</badge>
        }
        if (rect.DatasetID == -2)
        {
            <badge class="bt btn-danger">@rect.X @rect.Y</badge>
        }
    }
</p>
<br />
<hr>
<h3>Http response other that 200</h3>
@if (httpResposneList != null)
{
    foreach (var hr in httpResposneList)
    {
        <button class="badge badge-pill badge-info">@hr</button>
    }
}
<br />
<hr>
<h3>Exception</h3>
<br />
@if (exList != null)
{
    foreach (var ex in exList)
    {
        <p>@ex.Message</p>
    }
}
<br />

@code {
    private string inputdatasetname = "";
    private string inputToken = "";
    private int currentCount = 0;
    private int count = 0;
    private TaskUser TU;
    private string datasetname = "44";
    private List<int> httpResposneList = new List<int>();
    private List<Exception> exList = new List<Exception>();
    private List<Rectangle> responseList = new List<Rectangle>();

    private void SetInputToken(string s) =>
        inputToken = s;

    private void SetTaskName(string s) =>
        inputdatasetname = s;


    private async Task<TaskUser> GetDatasets()
    {
        var atask = new TaskUser("https://api.logyhog.com/api/", inputToken, inputdatasetname, $"blazor{RandomString(6)}");
        atask.Setlimits(datasetname, 5, 5, 3, 3);
        await Task.Delay(1);
        return atask;
    }

    private void LoadLimits()
    {
        TU.Setlimits(datasetname, 5, 5, 3, 3);
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    private async Task LoadTestTask()
    {
        try
        {
            TU = await GetDatasets();
        }
        catch (Exception e)
        {
            exList.Add(e);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            TU = await GetDatasets();
        }
        catch (Exception e)
        {
            exList.Add(e);
        }
    }

    private void Getresult()
    {
        try
        {
            int x = new Random().Next(0, 7);
            int y = new Random().Next(0, 7);
            var response = TU.XY(datasetname, x, y);
            if (response is Rectangle)
            {
                responseList.Add(response);
            }
            var getHttpresponse = TU.GetError(datasetname);
            if (getHttpresponse.ErrorInt < 0 || getHttpresponse.statuscode != 200)
                httpResposneList.Add(getHttpresponse.statuscode);
        }
        catch (Exception e)
        {
            exList.Add(e);
        }
    }

    public static string RandomString(int length)
    {
        var chars = "abcdefghijklmnopqrstuvwxyz";
        var stringChars = new char[length];
        var random = new Random();

        for (int i = 0; i < stringChars.Length; i++)
            stringChars[i] = chars[random.Next(chars.Length)];

        return new String(stringChars);
    }
}
