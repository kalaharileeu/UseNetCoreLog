@page "/counter"
@*using UseNetCoreLog.Data
    @inject LogyhogService LogService*@
<h1>Can load datasets and check Pass/Fail</h1>
<br />
@if (TU == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>@TU.ToString()</p>
}
<br />
<hr>
<button class="btn btn-primary" @onclick="IncrementCount">
    Test this page
    <span class="badge badge-light">@currentCount</span>
</button>
<button class="btn btn-danger" @onclick="Getresult">Test</button>
<br />
@if (e == null)
{
    <p>Exception: No Exception</p>
}
else
{
    <p>Exception: @e.Message</p>
}
<p>Pass/Fail: @value</p>

<p>@count</p>
@if (theError != null)
{
    <p>@theError.ErrorString</p>
    <p>@theError.ErrorInt</p>
    <p>@theError.httpStatus</p>
    <p>@theError.name</p>
    <p>@theError.loggingtype</p>
}
<br />
<p>
    @foreach (Rectangle rect in rectPassFail)
    {
        if (rect.DatasetID == 0)
        {
            <button class="bt btn-success">@rect.X @rect.Y</button>
        }
        if (rect.DatasetID == -1)
        {
            <button class="bt btn-warning">@rect.X @rect.Y</button>
        }
        if (rect.DatasetID == -2)
        {
            <button class="bt btn-danger">@rect.X @rect.Y</button>
        }
    }
</p>
<br />

@code {
    private int currentCount = 0;
    private int count = 0;
    private int value = -1000;
    private TaskUser TU;
    private string datasetname = "44";
    private ErrorFeedback theError = null;
    private Exception e;

    private List<Rectangle> rectPassFail = new List<Rectangle>();

    private void IncrementCount()
    {
        currentCount++;
    }

    private void LoadLimits()
    {
        TU.Setlimits(datasetname, 5, 5, 3, 3);
    }

    private async Task<TaskUser> GetDatasets()
    {
        var atask = new TaskUser("https://api.logyhog.com/api/", "J9ZDPC", "blazortest", $"blazor{RandomString(6)}");
        atask.Setlimits(datasetname, 5, 5, 3, 3);
        await Task.Delay(1);
        return atask;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            TU = await GetDatasets();
        }
        catch (Exception e)
        {
            this.e = e;
        }
    }

    private void Getresult()
    {
        int x = new Random().Next(0, 7);
        int y = new Random().Next(0, 7);
        var response = TU.XY(datasetname, x, y);
        theError = TU.GetError(datasetname);
        //-1 is a error
        if (response == null)
        {
            value = -66;
            return;
        }
        if (response is Rectangle)
        {
            rectPassFail.Add(response);
        }
        value = -66;
    }

    public static string RandomString(int length)
    {
        var chars = "78UVWXYZ01234ABCDNOPQRSGHIJKLM569TEF";
        var stringChars = new char[length];
        var random = new Random();

        for (int i = 0; i < stringChars.Length; i++)
            stringChars[i] = chars[random.Next(chars.Length)];

        return new String(stringChars);
    }
}
